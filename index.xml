<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Recent Content on Paul Karadimas </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>https://pkar.github.io/index.xml</link>
    <language>en-us</language>
    
    
    <updated>Wed, 04 Feb 2015 05:15:58 UTC</updated>
    
    <item>
      <title>runit</title>
      <link>https://pkar.github.io/post/runit</link>
      <pubDate>Wed, 04 Feb 2015 05:15:58 UTC</pubDate>
      
      <guid>https://pkar.github.io/post/runit</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/pkar/runit&#34;&gt;runit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main use case was to have something small and easy to use
inside docker containers. It could be used to continually run
tests on changes as well I guess, among other things.&lt;/p&gt;

&lt;p&gt;Initially just using a bash script could work&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;
export PID=

killit() {
  kill $PID 
  exit
}

restartit() {
  kill $PID 
  trap - SIGINT SIGTERM EXIT
  trap - SIGHUP
  runit
}

runit() {
  /path/to/myapp -options here
  PID=$!
  trap killit SIGINT SIGTERM EXIT
  trap restartit SIGHUP
  wait
}

runit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unless you want to for instance watch for changes and restart in say development.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;
$ # long running processes with keep alive and watch
$ runit -alive -cmd=&#34;test/test.sh&#34; -watch=./
INFO 2015/02/03 20:54:59 runit.go:100: running test/test.sh
foo
foo
foo
foo
^C
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>pruxy</title>
      <link>https://pkar.github.io/post/pruxy</link>
      <pubDate>Wed, 05 Nov 2014 00:21:23 UTC</pubDate>
      
      <guid>https://pkar.github.io/post/pruxy</guid>
      <description>&lt;p&gt;A simple reverse proxy that is configured through etcd.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/pkar/pruxy&#34;&gt;pruxy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main use case was to have something light in front of docker containers
on coreos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;
docker build -t pkar/pruxy .
docker run pkar/pruxy -port=6000 -dir=/prux -etcd=$LOCAL_IP:4001,$LOCAL_IP:4002,$LOCAL_IP:4003
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>docker vagrant setup on Mac OS X</title>
      <link>https://pkar.github.io/post/dockervagrant</link>
      <pubDate>Wed, 06 Aug 2014 20:08:03 UTC</pubDate>
      
      <guid>https://pkar.github.io/post/dockervagrant</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;
The below is outdated, with docker 1.3 you can just get the official installer.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running docker on Mac OS X isn&amp;rsquo;t simple, and I&amp;rsquo;m dumb so I had to find a better way
of doing things.&lt;/p&gt;

&lt;p&gt;The old way I did things was to use packer to build a vagrant box with docker installed.
&lt;a href=&#34;https://github.com/pkar/quasi&#34;&gt;quasi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The reason for doing this was to be able to mount a host directory. Things have changed
with boot2docker, so the easier way I found was something like the below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;
# install some requirements, might need boot2docker HEAD if there are issues
# homebrew
ruby -e &#34;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)&#34;
brew tap phinze/cask
brew install brew-cask
brew cask install virtualbox
brew cask install vagrant

brew tap homebrew/binary
brew install docker
brew install --HEAD boot2docker
boot2docker delete
boot2docker init
boot2docker stop

# download a boot2docker iso with virtualbox additions.
wget http://static.dockerfiles.io/boot2docker-v1.2.0-virtualbox-guest-additions-v4.3.14.iso
mkdir -p ~/.boot2docker
mv boot2docker-v1.2.0-virtualbox-guest-additions-v4.3.14.iso ~/.boot2docker/boot2docker.iso

# virtual box add the shared folder.
VBoxManage sharedfolder add boot2docker-vm -name home -hostpath /Users

# run boot2docker
boot2docker up

# you can manually ssh with user: docker pass: tcuser
# ssh docker@192.168.59.103
# or with boot2docker ssh

# test
boot2docker ssh &#34;ls /Users&#34;
# you should see the home directory listed here

boot2docker ip
IP=`boot2docker ip`
export DOCKER_HOST=tcp://$IP:2375

# or for instance redis in foreground
docker run --rm -i -t -p 6379:6379 dockerfile/redis
# background
docker run -d -p 6379:6379 dockerfile/redis

$ docker ps
CONTAINER ID        IMAGE                     COMMAND                CREATED              STATUS              PORTS                    NAMES
768bdf26d40a        dockerfile/redis:latest   redis-server /etc/re   About a minute ago   Up About a minute   0.0.0.0:6379-&gt;6379/tcp   goofy_pike

# in another terminal
redis-cli -h $IP

docker stop 768bdf26d40a

# run docker with whatever directory you want mounted.
docker run -i -t -v /Users/$HOME/project1:/data ubuntu /bin/bash

docker run -it --rm dockerfile/python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://medium.com/boot2docker-lightweight-linux-for-docker/boot2docker-together-with-virtualbox-guest-additions-da1e3ab2465c&#34;&gt;reference&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>self updating go package</title>
      <link>https://pkar.github.io/post/refurbished</link>
      <pubDate>Sun, 03 Aug 2014 00:44:38 UTC</pubDate>
      
      <guid>https://pkar.github.io/post/refurbished</guid>
      <description>&lt;p&gt;For whatever reason I thought it&amp;rsquo;d be great to have a go binary update itself. My usual
method is to just use a &lt;a href=&#34;https://github.com/pkar/go-fabric&#34;&gt;fabric file&lt;/a&gt;. But that
got boring so I made a refurbishing package instead. &lt;a href=&#34;https://github.com/pkar/refurbish&#34;&gt;refurbish&lt;/a&gt;
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;
package main&lt;/p&gt;

&lt;p&gt;import &amp;ldquo;github.com/pkar/refurbish&amp;rdquo;&lt;/p&gt;

&lt;p&gt;func main() {
    // Path to latest binary,
    // path to latest md5 file,
    // restart commands semicolon separated
    r := refurbish.New(
        &amp;ldquo;&lt;a href=&#34;http://example.com/path/to/binary&amp;quot;&#34;&gt;http://example.com/path/to/binary&amp;quot;&lt;/a&gt;,
        &amp;ldquo;&lt;a href=&#34;http://example.com/path/to/md5&amp;quot;&#34;&gt;http://example.com/path/to/md5&amp;quot;&lt;/a&gt;,
        &amp;ldquo;sudo initctl restart binary&amp;rdquo;,
    )
    go r.run()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;Usage is pretty simple, features are for now as basic as it gets. Basically it just pings a url to check if
the binary has changed, and if so it replaces itself and reloads. Work in progress&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>stack</title>
      <link>https://pkar.github.io/post/stack</link>
      <pubDate>Sat, 02 Aug 2014 00:48:45 UTC</pubDate>
      
      <guid>https://pkar.github.io/post/stack</guid>
      <description>&lt;p&gt;I needed something simple to try out the formatting of this page.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;
package main

import &#34;stack&#34;

func main() {
    s := stack.New()
    s.Push(1)
    s.Push(2)
    s.Push(&#34;x&#34;)

    fmt.Println(s.Len())
    // Output: 3

    x := s.Pop()
    fmt.Println(x)
    // Output: x
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A human might create their directory and file layout as such
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;
$ mkdir -p src/stack
$ touch main.go # put the contents of main above
$ # copy the stack src from below to src/stack/stack.go
$ export GOPATH=$(pwd)
$ go run main.go
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the implementation of it.
&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;
// Package stack implements a basic stack data structure.
package stack&lt;/p&gt;

&lt;p&gt;// Stack holds a reference to the top of the stack
// and the current size.
type Stack struct {
    top  *Item
    size int
}&lt;/p&gt;

&lt;p&gt;// Item holds the value for the item and
// the next Item.
type Item struct {
    value interface{}
    next  *Item
}&lt;/p&gt;

&lt;p&gt;// Len returns the stacks length.
func (s *Stack) Len() int {
    return s.size
}&lt;/p&gt;

&lt;p&gt;// Push adds a new element onto the stack and
// sets top to the pushed item.
func (s *Stack) Push(value interface{}) {
    s.top = &amp;amp;Item{value: value, next: s.top}
    s.size++
}&lt;/p&gt;

&lt;p&gt;// Pop removes the top element from the stack and returns the value
// along with setting top to the next element.
// If the stack is empty, return nil
func (s *Stack) Pop() interface{} {
    if s.size &amp;gt; 0 {
        value := s.top.value
        s.top = s.top.next
        s.size&amp;ndash;
        return value
    }
    return nil
}&lt;/p&gt;

&lt;p&gt;// New is a helper for an initial stack.
func New() *Stack {
    return &amp;amp;Stack{}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>https://pkar.github.io/about</link>
      <pubDate>Fri, 01 Aug 2014 00:43:17 UTC</pubDate>
      
      <guid>https://pkar.github.io/about</guid>
      <description>&lt;p&gt;Hi I&amp;rsquo;m Paul &lt;a href=&#34;/resume/&#34;&gt;resume&lt;/a&gt; | &lt;a href=&#34;https://github.com/pkar&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/me.jpg&#34; alt=&#34;me&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>resume</title>
      <link>https://pkar.github.io/resume</link>
      <pubDate>Wed, 01 Jan 1000 00:00:00 UTC</pubDate>
      
      <guid>https://pkar.github.io/resume</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;Paul Karadimas&lt;/h1&gt;

&lt;p&gt;I like computers in general.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Things I&amp;rsquo;ve worked with in the past&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Software/Server Architecture&lt;/code&gt; go, python, mysql, mongodb, redis, postgres, javascript, c/c++, objective-c, php, design and implementation of large scale systems, etc&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Work&lt;/h2&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Upsight&lt;/h3&gt;

&lt;h4 id=&#34;toc_4&#34;&gt;Software Server Engineer &lt;strong&gt;August 2014 - Present&lt;/strong&gt; &lt;em&gt;Portland, Or, USA&lt;/em&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;- ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;DeNA(formerly Ngmoco)&lt;/h3&gt;

&lt;h4 id=&#34;toc_6&#34;&gt;Software Server Engineer &lt;strong&gt;December 2012 - August 2014&lt;/strong&gt; &lt;em&gt;San Francisco, Ca, USA&lt;/em&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;- Rewrite of a push notification system in Go, Redis, MySQL
- Creation of a cross promotion recommendation service in Go with MongoDB
- Creation of a social and interest graph following RDF in Go
- Creation of a authorization service ACL&#39;s using Go, Python, MongoDB
- Architecting, coding, and deployment of a new gaming platform using Go, Python, Docker containers, Postgres, AWS
- Maintenance on an Oauth proxy using Go, Redis
- Maintenance on various Ruby and Go services like UA, push notifications, a/b testing, analytics proxy, using Redis, MongoDB, MySQL, Cassandra, RabbitMQ
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;Idea2 Ltd.&lt;/h3&gt;

&lt;h4 id=&#34;toc_8&#34;&gt;Lead Architect and Software Engineer&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;October 2008 - November 2012&lt;/strong&gt; &lt;em&gt;Location:Earth:Chicago:New York&lt;/em&gt;&lt;br /&gt;
Design, implementation, and maintenance of the Idea2 multitenant platform for&lt;br /&gt;
business automation, including web and mobile based application versions.&lt;br /&gt;
The platform was designed utilizing AWS services.&lt;br /&gt;
It was a multi-iteration development process, with the original version&lt;br /&gt;
written in a LAMP stack. Following iterations included porting over to&lt;br /&gt;
a Python based framework, along with converting the database architecture&lt;br /&gt;
over to MongoDB. A UI and native iPhone app was also created to utilize the&lt;br /&gt;
API. An implementation deployed to Heroku was also built.
I also worked on a custom business process modeling engine in Python,
along with integration of other business services.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Paul is one of the smartest developers I have ever worked with in my career.  
  He has built an advanced application foundation and backend that has been   
  rock-solid in terms of reliability and uptime. 

  He has a strong work-ethic and manages an extremely large project without  
  any hand-holding or babysitting. Paul has had to work with minimal  
  requirements in building and maintaining the Idea2 platform yet has never  
  been slowed down by that fact; he has always managed to keep moving the  
  development forward. He has been able to quickly adapt to new and emerging  
  technology without flinching and has recently initiated Idea2&#39;s integration  
  with mobile platforms.  

  December 7, 2011
  Patrick Ryan, Integration Engineer, Idea2 Ltd worked directly with Paul  
  at Idea2 Ltd
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_9&#34;&gt;Midway Games&lt;/h3&gt;

&lt;h4 id=&#34;toc_10&#34;&gt;Software Engineer&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;August 2007 - October 2008&lt;/strong&gt; &lt;em&gt;Location:Chicago, USA&lt;/em&gt;&lt;br /&gt;
Lead development for company wide asset management system utilizing&lt;br /&gt;
a custom Unreal Engine 3 and various Linux based tools.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Paul is an exceptional programmer. His completion of our large scale   
  project for Midway Games surpassed our expectations. Taking on a project   
  that had no model for him to imitate, he created his own specifications  
  and the end product was efficient, scalable and on time. I enjoyed working  
  with Paul and wouldn&#39;t hesitate to work with him in the future.  

  October 8, 2008
  Lee Helmer, Producer/Project Manager, Midway Games managed 
  Paul at Midway Games
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_11&#34;&gt;IP Pixel&lt;/h3&gt;

&lt;h4 id=&#34;toc_12&#34;&gt;Software Engineer&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;June 2006 - August 2007&lt;/strong&gt; &lt;em&gt;Location:Chicago, USA&lt;/em&gt;&lt;br /&gt;
Development of large scale web based social network applications for&lt;br /&gt;
companies such as ESPN, Miller, Petsmart. I designed and rewrote several&lt;br /&gt;
of the platforms and designed the architecture for several&lt;br /&gt;
large scale projects.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Paul is a designers dream. He sticks to a given layout and doesn&#39;t
  skip corners. He is timely and reliable and uses his creativity to solve
  any programmatic hurdle in his way.
  
  September 24, 2008
  Justin Rath, Flash Developer / Flash Animator, Starcom Pixel worked 
  directly with Paul at Starcom Pixel
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_13&#34;&gt;School&lt;/h2&gt;

&lt;h4 id=&#34;toc_14&#34;&gt;University of Reading, UK&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;MSc Cybernetics&lt;/strong&gt; 2004-2006&lt;br /&gt;
A Convoluted System: Multichannel Blind Source Separation of Audio using
Ambisonic Microphones and Independent Component Analysis&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using unsupervised learning algorithms, I created system that
solved the coctail party problem.&lt;/p&gt;

&lt;h4 id=&#34;toc_15&#34;&gt;University of Illinois, Chicago&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;BSc Computer Science&lt;/strong&gt; 2001-2004&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;toc_16&#34;&gt;Random Paul facts&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I played in the now defuct music act called&lt;br /&gt;
The Alcoholic(sometimes spelled Alkoholic) Chickens. My lead guitar
skills are unmatched, in our genre.&lt;/li&gt;
&lt;li&gt;One should never order the same meal as me, it&amp;rsquo;s embarassing.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Cats should not be household pets.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_17&#34;&gt;Things that lack coherent meaning (nonsense)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I used to like muscle cars until I bought a 73 Mercury Cougar XR7&lt;br /&gt;
convertible with no AC.&lt;/li&gt;
&lt;li&gt;I decided to get my motorcycle license in New York City; the least&lt;br /&gt;
likely place I&amp;rsquo;d choose to ride a bike. I haven&amp;rsquo;t ridden since but I like the option.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;m almost certain I can survive on a green powder I found called&lt;br /&gt;
Green Vibrance, but I still need scotch.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
*****
)0.o(
  U
`___&#39;
&lt;/pre&gt;

&lt;pre&gt;
DO$$ZOOO7DDDDDDDDDDDNNNMDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDNNN8Z$777$ZD8
8OO88DDDD8DDDDDDDDDDDDDDNNMDDDDDDDDDDD88DDDDDNDDOO8DDDDDDDDDDDDDDDDDDDNNDOZO8DDD
???Z888O8DDDDDDDDDDDDDDDDDDDDD8$8DDDDDDD8D8Z$Z88DDDDDDDDDDDDDDDDDDDDDDDDDNND8D88
8$I?+?+I88888DDDDDDDDDDDD888O88DDDDDDDDDDDDDDDDN88DDO8ODDDDDDDDDDDDDDDDDDDDNNNNO
DD8O887?+???ZD888DD8DDDD88DDD88OO8DDDZDDNDDDDNNDDDDDD88DDDDDDDDDDDDDDDNDDDDDNNNN
88NNNDN8O8O$I??IIO8888DD88DD8Z8O88DDD888Z8DN8DDD8OZDDODDDDDD8DDND88DNNNNDDNNNNNN
DDDNDO8DNDDNO88Z7I?7Z8DDNDDD888DD8ZD8OZODDD78DZ8O$Z8NDDOZ8N8DDDD8D8DDNNNNNNNMMMM
DDNNDNDNDDZDDDNNDZ8DDNDDDDDDDDDND88888888O$8ZDZZ8O8DDDNNN8ZZ88DNOOODDDNMNNNND888
NNNNDDNNNNNNNNDODDDDD8DDDDDDNDDD8D8$888Z$7DOD8Z$ODO8N8DDD8OZOOOOD8DDD8DD88888888
88DDDDNNNDNNNDDNDDDDDDDND8ODNNDDDDDND88OZZDD8D8OZ888O8DO$OD8DD8OO888O88888888888
88888888DNNNNNNN8DD88OOOOO$8DN8OO8DD8O$ODDD8Z8888O888OD8OO8DDDDDDDDDOO8888888O8O
8888888888888DD8DDDDDDOOO8DDZ8ZO$DDDDZ78D8OZ8OZ$$$Z777$ZO8888DD88DD8OO8O8O$$$$ZD
8OOO8888888DDD8D8D8DNO8DD88D8D$D888888DO8O$O8Z77$777II++++?7IZO8888O8OOOODNDND88
O8888D8OODDDDO8D8DDOODDDD8DZ8DD888DD888OZZ$777?+=========+++??I788888D8D88D8D8D8
OO88888888DNDDNDD8888DDNDDOO8DDOONDD$8$ZOZOZ$Z??==~~~=====++++???$888888888DDD8D
OO8OOO8888DDDDDDD8DDD88DD8D8DZ8DDDO8OO$O7?7Z$II?+==~~~=====++++???IO88888888888D
Z8888Z888888DDDDD8DDZ8ZO8OD8OZ8DZ8$8OZZZ$?I7$7??+====~~=======++??I$D88888888888
88DD88DD888DDDDDDDDDD8OOZO88ZZ888ZZZOO$ZZ7$77$??+===~~=~=~======+??I7D8DD88D8888
O8888ODDDD88DDDODDDDDDD8ODO888OOZOZOO$ZO$$7ZII7I+==~~~~~~========+??I77IZD8DDDDD
888888888888DDDDDDDDOO88DDDD8Z$ZOO8Z8O8Z7$777II+=~~~~=~~~~~======++??I8DO$IIZ8DD
OOOOO88DDDD888D8DDDDDDOZ8888DDO$$OZZZO8Z$$$77??=+~:::~~~~~~~~=====+???IDDDDDDO$I
OOOZZZO888DDO8O8DDDDD8ZOZ$ZZ8DZOOZZ77Z$Z7$77?I+~:::::::~~~~~~~~~~==+???OD8Z8DNDD
OOO88DDDDD88DD8O88DDDD8OO88O8OO88OOZZ$$$$77+I~:::::::::~~~====~~~~==??+?DDDDDN8Z
DD888OZZO88888DDDOO8DDD8DDD888OOOOZZ$$7Z777?::::::::::~~~~~~=+++++=++?+=$DDDNNND
$$O88D8DDD88O88DDDOODDDO==IOZZOZZ$$ZZZOZ$?~::::::::::~~~~~~+I777$$$$7?++?8888888
88DNOZO8Z7Z88DDDOO88Z8===~==+ZOZZ$Z$$7+I+~:~~~~:~:~~~:~~~=++++?$7$7I?++?IO888888
????+8887$Z88OOO8D8O8+~~~::~+=ZZZZZZZ7I?=~~~~~~~:~~~~~~~~====+I7$?++++?IO8888888
I????8887$O8888O8Z8OO=~=~,::~~=+I7Z?7I7?+~~~~~~~~:~~::~==+I??I$I?+===I7I88888888
ZOO888O87O88DDDDD8O88=~+:::~~=~==+===?I+?=~~~~~~~:::~~~====+++??+=~~~?OO88888888
OOOOO888O8D8DDDD88Z88?=+:~=:~=~~~~I??I==?==~~~~~~~~~~~~==~==+?+++=~~~=Z8888888OO
OOOOOO88OO8888DDD8D88O=+~=~:~==~::~~===~~~~~~~~~~~~~~~~~~==++++=====~=+IOOOOOO88
ZOOOO888OZO8D8O88888OO?=~=::~==:::~~=~~~~~~~~~~~~:::~~~~~~~=++==~~~~~~~=?OOOOO8O
$ZZOO888OOOO8DDDOOO8OO$==~~~===~::~~~~~~~~~~~~~~::::::~~~~~~=+===~~~~~==+:==~~~~
III7$OOOZZZZO8DD8D8D8Z7I~~~~~:=~::~~=~~~~~~~~~~::::::::~~~~=======~~~====+~~~~~:
III7I$8O7I7OZOOOOOD88ZZ?I=~~::::::~~=~~~~~~~~~~~~:~::::::~~~~=====~=+=====?7777?
$OO88DDOO7I$O8OO8O8OO88Z==?~:~::~:~~=~=~~~~~~~~~~:::::::::~~~~==+========++7DDDD
888O88OZ$7$ZO8888OO8OZOZ++==+=~:~=~===~=~~~~~:::~::~:::::~~~~~=++==~:~~~~~=?D8DD
$ZZ$$$$$I7$OO88888888OO7====~~~~++~====~~~~~::::~:~:~~:::~~~~=++==+++==++=?77777
88888888OOZZZOOO888ZO8ZO?====~:~=+======~~~~:::::::::::~:~~~=+====?I???7O$ZOOOOO
:+:I7O888OOO7$ZZOO8O8OOZ?==+=~~~=+======~~~:::::::::~:~~~~~==+II??$$$Z$$ZZZZZZZZ
~~:~~~:+~,,...,ZZOOZOOZ7===+=~~~~++====~~~~~~~::::~::~~~~~==+I777$Z7Z$ZZ8ZZZZZZZ
~:~~~::?=:,.....7OOOOZ7+=====~~~~=++===~~~~~~~~~~~~:~~~~~~=?I$$$7$$$$Z$77ZZZZZZZ
~~~=~=,??=:..  .$O$ZZ$?+=====~~~~~+++==~~~~~~~~~~~~~~~~~~~?$$77I77$7$$ZOZ$7I?I7I
:=~~~~~?=~:.   .7O$Z$I?+====~~~~:~~=+====~~~~~~~~~~~~~~~~=I7?++++???ZOZIIIIIII?I
~.~,~::?~.,.   .IO$Z$?++====~~~~~~~~++====~~~~~~~~~~~~~=+?7?+++?+??I.,,,,.......
~:~~~~:?I+= . ..I$?=I?++====~~~~~~~~~======~~~~~~~~~~~=+I7I??+??7777~...........
:~~~~~~?+~~. ..,+~=~I?++====~~~~~~~~~~~====~==~=~~~~==??$II???+I7$$$I...   .....
~~=~~~~??=:...,==~:+I?++====~~~~~~~~~~~=~~=~==~======II77$IIII?7$Z$7$:.. .......
??I~=:~++~~. ,::~~,7??++==~~~~~~~~~~~~~~======~==+?7I$7I777$II777$$7$+....      
?++~:~:=+~:..~,~::~7?++===~~~~~~~~~~~~~~====++?I?II$7II$$77I7I$7777II$+...      
+=+~=~:==~:..::,,:,=?+===~~~~~~~~~~~~~~~~====+??7$$77$Z7$77$777$7$7$I$I,..     .
=~:==::=?+=.~::,:.:,:===~~~~~~~~~~~~~~~~=~======?7$Z$ZZZOZZ$$Z$$$7OZ$7$= ...... 
~:=:::~++~:,~~::,:.,.:~~~~~~~~~~~~~~~~~~~=~====++II=.:I$ZZ7$$II~.7$8$I$II?+:?+?I
........~:~:::~,,.:,..,,~~~~~~~~~~~~~~~===~~~==+++:,,.~77?, .....,$8Z$ZOOZZZZZZZ
:::~::~,:::::,:..,.,,,.,:~~~~~~~~~~~~~~~~~~~======.,.:~$$?,.......~$8ZIZO...... 
~=~=:.,,..,.,,.....,.,...::~~~:~~~~~~~~~~~~~~===+,:,.,.:I?:..     ,IOZ$IO.... . 
=::,.,,...,.,...,.,.,.,.,.::::::~~~~~~~~~~~~===++:,.:.,.,,:..    ..=Z8$IZZ.....,
:,...,,,.,.,.,.............,::::~~~~~~~~~~~=====?~.:.,,:.,.::,.....+7OZ88D8887,,
.,..,,:,,.,.,...,............::::~~~~~~~~~~=====?,:.,...,:.,::::,.~~IZ8DDDD888$,
:,:,.,.,.,,::.................:::::~~~~~~~=====++:::,...,,~::::::~:~IZ8DDDDD8D8,
....,............. ..........,.,:::::~:~~==~~~~++:,.,,.,,,:,::,,:,::~8DDDDDDDDD?
........,.....,.......,..........:::::::~=~~::=++~:,,:,.:~.:,,:,,,~:?8DDDDDDDD8,
,........,.,..,,.,...............,::::::~=~::~+++:,:,:.,::::,:,:,,:.~O8DDDDDDDD:
,.,.,.,....,,:.,,..,.......... ...,:::::~=~::~+?+::.,,,.,,,:,:,,:,:.,~ODDD88N87D
.,.,...........:............... ...,:::::=~:~~=++:.,..,,.,,::::,,::,.,DDDD8888DN
.....,.,.............,.,........,:~..,,::~=~~~===:,,,,..,,.,,::,.:,,,::8DDDDNDDN
........., .... ...............,.,,,:...,:=~~~===:,,,.,,.:,,,,:,,:,::,:8DDDDDDNN
&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>